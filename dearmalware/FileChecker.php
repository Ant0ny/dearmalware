<?php

namespace DearMalware;

use DearMalware\Helper;

class FileChecker {

    private $helper;
    private $view;

    public function __construct() {
        $this->helper = new Helper();
        $this->view = new TemplateEngine();
    }

    /**
     * Check files for config patterns matching.
     *
     * @return return
     */
    public function filesChecking() {
        $output = '';
        $is_found = false;
        $i = 0;

        foreach ($_SESSION['files'] as $file) {

            $i++;
            $count_1 = 0;
            $count_2 = 0;
            $flag = 0;

            foreach (EXTS as $ext) {

                if (mb_strpos($file, $ext)) {
                    $flag = 1;
                }
            }

            if ($flag) {

                $str2 = '';

                $message = '';
                $str = file_get_contents($file);

                foreach (SEARCH_FOR_HIGH_RISK as $s) {
                    $count_1 += mb_substr_count($str, $s);
                    $pattern = preg_quote($s);
                    preg_match_all('#(.{0,20}' . $pattern . '.{0,20})#um', $str, $matches1, PREG_SET_ORDER);

                    if (!empty($matches1[0][1])) {
                        foreach ($matches1 as $m) {
                            $a = preg_replace('#' . $pattern . '#mu', '::temp::', $m[1]);
                            $a = htmlspecialchars($a);
                            $a = preg_replace('#::temp::#', '<strong class="red">' . $s . '</strong>', $a);
                            $str2 .= '<p>' . $a . '</p>';
                        }
                    }
                }

                if ($count_1) {
                    $message .= '<strong>' . $this->helper->getNumEnding($count_1, ['Found', 'Found']) .
                        ' <span class="red">' . $count_1 . '</span> ' .
                        $this->helper->getNumEnding($count_1, ['a dangerous function', 'dangerous functions']) .
                        ' </strong><!-- [?]--><br>';
                }

                foreach (SEARCH_FOR_LOW_RISK as $s) {
                    $count_2 += mb_substr_count($str, $s);
                    $pattern = preg_quote($s);
                    preg_match_all('#(.{0,20}' . $pattern . '.{0,20})#um', $str, $matches2, PREG_SET_ORDER);

                    if (!empty($matches2[0][1])) {

                        foreach ($matches2 as $m) {
                            $a = preg_replace('#' . $pattern . '#', '::temp::', $m[1]);
                            $a = htmlspecialchars($a);
                            $a = preg_replace('#::temp::#', '<strong class="yellow">' . $s . '</strong>', $a);
                            $str2 .= '<p>' . $a . '</p>';
                        }
                    }
                }

                if ($count_2) {
                    $message .= '<strong>' . $this->helper->getNumEnding($count_1, ['Found', 'Found']) .
                        ' <span class="yellow">' . $count_2 .
                        '</span> potentially ' . $this->helper->getNumEnding($count_1, [
                        'dangerous variable',
                        'dangerous variables'
                    ]) . ' of HTTP-requests</strong><!-- [?]--><br>';
                }
            }

            if ($count_1 || $count_2) {
                $is_found = true;

                $result = $this->view->render('files_checking_ok', ['i' => $i, 'file' => $file, 'message' => $message, 'str2' => $str2]);
                $output .= $result;
            } else {
                $result = $this->view->render('files_checking_fail', ['i' => $i, 'file' => $file]);
                $output .= $result;
            }
        }

        return [$output, $is_found];
    }

}