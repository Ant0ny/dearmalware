<?php

class DearAjaxScanner
{

  public function __construct()
  {
    @session_start();
    define('CAT', __DIR__);
    define('EXTS', [
      '.php', '.inc', '.phtml',
    ]);
    define('SEARCH_FOR_HIGH_RISK', ['base64_decode', 'base64_encode', 'eval', 'system', 'system_shell', 'exec', 'passthru']);
    define('SEARCH_FOR_LOW_RISK', ['$_POST', '$_GET', '$_REQUEST']);
  }

  public function actionProcess()
  {
    $output = '';
    $is_found = FALSE;
    $arr = [];

    if ($_POST['action'] == 'get_structure') {
      $output = $this->showDirs();
    }

    if ($_POST['action'] == 'check_viruses') {
      $arr = $this->showFileChecking();
      $output = $arr[0];
      $is_found = $arr[1];
    }

    $this->outputJsonResponse($output, $is_found);
  }

  private function showDirs()
  {
    unset($_SESSION['files']);
    $output = '<button class="btn btn-primary" data-toggle="collapse" data-target="#collapseExample">List directories</button>';
    $output .= '<div class="collapse" id="collapseExample"><h2>Listing dirs of your site:</h2>';
    ob_start();
    $this->recursive(CAT, EXTS);
    $output .= ob_get_clean();
    $output .= '</div>';

    return $output;
  }

  private function showFileChecking()
  {
    $output = '<h3>Ð¡heckable files:</h3>';
    $is_found = false;
    $i = 0;

    foreach ($_SESSION['files'] as $file) {
      $i++;
      $count_1 = 0;
      $count_2 = 0;
      $flag = 0;
      foreach (EXTS as $ext) {
        if (mb_strpos($file, $ext)) {
          $flag = 1;
        }
      }
      if ($flag) {
        $str2 = '';
        $message = '';
        $str = file_get_contents($file);
        foreach (SEARCH_FOR_HIGH_RISK as $s) {
          $count_1 += mb_substr_count($str, $s);
          $pattern = preg_quote($s);
          preg_match_all('#(.{0,20}' . $s . '.{0,20})#um', $str, $matches1, PREG_SET_ORDER);
          if (!empty($matches1[0][1])) {
            foreach ($matches1 as $m) {
              $a = preg_replace('#' . $pattern . '#mu', '::temp::', $m[1]);
              $a = htmlspecialchars($a);
              $a = preg_replace('#::temp::#', '<strong class="red">' . $s . '</strong>', $a);
              $str2 .= '<p>' . $a . '</p>';
            }
          }
        }
        if ($count_1) {
          $message .= '<strong>' . $this->getNumEnding($count_1, ['Found', 'Found']) .
            ' <span class="red">' . $count_1 . '</span> ' .
            $this->getNumEnding($count_1, ['a dangerous function', 'dangerous functions']) .
            ' </strong><!-- [?]--><br>';
        }

        foreach (SEARCH_FOR_LOW_RISK as $s) {
          $count_2 += mb_substr_count($str, $s);
          $pattern = preg_quote($s);
          preg_match_all('#(.{0,20}' . $pattern . '.{0,20})#um', $str, $matches2, PREG_SET_ORDER);
          if (!empty($matches2[0][1])) {
            foreach ($matches2 as $m) {
              $a = preg_replace('#' . $pattern . '#', '::temp::', $m[1]);
              $a = htmlspecialchars($a);
              $a = preg_replace('#::temp::#', '<strong class="yellow">' . $s . '</strong>', $a);
              $str2 .= '<p>' . $a . '</p>';
            }
          }
        }
        if ($count_2) {
          $message .= '<strong>' . $this->getNumEnding($count_1, ['Found', 'Found']) .
            ' <span class="yellow">' . $count_2 .
            '</span> potentially ' . $this->getNumEnding($count_1, [
              'dangerous variable',
              'dangerous variables'
            ]) . ' of HTTP-requests</strong><!-- [?]--><br>';
        }

        if ($count_1 || $count_2) {
          $is_found = true;
          $output .= '<div class="file"><p class="file' . $i . '">File: ' . $file . '<br>';
          $output .= $message . '</p>';
          $output .= '<div class="found_issues">' . $str2 . '</div>';
          $output .= '</div>';
        } else {
          $output .= '<div class="file" style="display: none;"><p class="file' . $i . '">File: ' .
            $file . '</p></div>';
        }
      }
    }

    return [$output, $is_found];
  }

  private function outputJsonResponse($output, $is_found)
  {
    header('Content-type: application/json; charset=utf-8');

    echo json_encode(
      [
        'whatfound' => $output,
        'isfound' => $is_found,
      ]
    );
    exit;
  }


  private function getNumEnding($number, $endingArray)
  {
    switch ($number) {
      case (1):
        $ending = $endingArray[0];
        break;
      default:
        $ending = $endingArray[1];
    }
    return $ending;
  }

  private function recursive($dir, $exts)
  {
    static $deep = 0;

    $odir = opendir($dir);

    while (($file = readdir($odir)) !== FALSE) {
      if ($file == '.' || $file == '..') {
        continue;
      } else {
        $flag = 0;

        foreach ($exts as $ext) {
          if (mb_strpos($file, $ext)) {
            $flag = 1;
          }
        }

        $str = '';

        if ($flag) {
          $str = '<span class="red"> ...verifying</span>';
        }
        echo str_repeat('---', $deep) . $dir . DIRECTORY_SEPARATOR . $file . $str . '<br>';
        $_SESSION['files'][] = $dir . DIRECTORY_SEPARATOR . $file;
      }

      if (is_dir($dir . DIRECTORY_SEPARATOR . $file)) {
        $deep++;
        $this->recursive($dir . DIRECTORY_SEPARATOR . $file, $exts);
        $deep--;
      }
    }
    closedir($odir);
  }
}

$malware = new DearAjaxScanner();
$malware->actionProcess();
